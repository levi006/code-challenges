#!/usr/bin/env python

import sys, json

def add_ready_courses(courses_reqs, sorted_schedule):
    """ 
    add_ready_courses loops over the courses until it finds a course with 
    the prerequisites already present in sorted schedule. If so, that means 
    the course can be added to sorted_schedule. Once added, the course is 
    deleted from the courses_reqs list so we don't end up checking it again,
    and we exit the function and hop back into the while loop in scheduler().  

    If we have checked every course in the courses_reqs list but are unable 
    to add a course to sorted_schedule, that means that the prerequisites 
    in sorted_schedule do not match the dependencies of the remaining courses 
    in courses_reqs list. Instead of getting stuck in an infinite loop, 
    we raise an error.  

    """

    for idx, course in enumerate(courses_reqs):
        prereqs = course['prerequisites']
        name = course['name']

        # checks if prereqs are present in sorted_schedule
        if set(prereqs).issubset(sorted_schedule):
            sorted_schedule.append(name)
            
            # delete course from the courses_reqs list 
            del courses_reqs[idx]
            
            return

    # if we've gone through the entire course catalog and nothing could be resolved,
    # but there are still courses in the catalog, we've hit a circular dependency 
    raise RuntimeError("Error: unresolvable loop in requirements")

def scheduler(filename):
    """
    Scheduler is the main function -- it loads json data and creates a 'courses_reqs'
    list of courses and their requirements. While there are courses in the courses_reqs 
    list, each course will be processed by the add_ready_courses function. If the 
    requirements of a course are present in sorted_schedule, the course name will be
    appended to sorted_schedule. If all the courses in the courses_reqs list have been
    added to sorted_schedule and courses_reqs is empty, the courses in sorted_schedule
    will print out, each course on a new line.   

    """

    with open(filename) as schedule_data:    
        courses_reqs = json.load(schedule_data)

    # list of courses that have had their prerequisites met/dependencies resolved
    sorted_schedule = []

    if courses_reqs == [] or courses_reqs == None:
        raise ValueError("No argument provided")

    while courses_reqs != []:
        add_ready_courses(courses_reqs, sorted_schedule)

    # prints courses on new line
    for course in sorted_schedule:
        print(course)

    return

# ensures that json file is read as second argument in command line
if len(sys.argv) > 1:
    json_filename = sys.argv[1]
else:
    raise ValueError("Error: no filename given")

scheduler(json_filename)
